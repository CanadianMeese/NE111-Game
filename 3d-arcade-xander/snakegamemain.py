# import all modules neccesary
# pygame for the basic display funtions,
# time for the game clock (frame rate and refresh speed),
# random to randomize the placement of the apples each time
import pygame
from pygame.locals import *
import time
import random

def snakegame():

    # Variable and Colours
    size = 40
    background_colour = (100, 120, 15)
    white_text = (255, 255, 255)

    # parameters for the apples
    class Apple:
        def __init__(self, parent_screen):
            # uploaded image for the apple already scaled to size
            self.image = pygame.image.load("apple_with_new_background.png").convert()
            self.parent_screen = parent_screen
            # coordinates are multiples of 'size' in order to make sure the apples always line up with the snake
            # the 3 doesn't matter it is just the placement of the first apple
            self.x = size * 3
            self.y = size * 3

        # placing the apple at the coordinates
        # first the ones given for the start appple
        # every subsequent one has its coordinates generated by the def move(self) funtion below
        def draw(self):
            self.parent_screen.blit(self.image, (self.x, self.y))
            pygame.display.flip()

        # randomizes the placement of the apple withing the screen grid each time one is eaten by the snake
        def move(self):
            self.x = random.randint(0, 24) * size
            self.y = random.randint(0, 14) * size

    # parameters of the snake
    class Snake:
        def __init__(self, parent_screen, length):
            self.length = length
            self.parent_screen = parent_screen
            self.x = [size] * length
            self.y = [size] * length
            self.block = pygame.image.load("snake_head.png").convert()
            self.direction = 'down'

        # funtion for the snake to grow
        def increase_length(self):
            self. length += 1
            self.x.append(-1)
            self.y.append(-1)

        # placing the snake at the start coordinates and refreshing the screen
        def draw(self):
            self.parent_screen.fill((background_colour))
            for i in range(self.length):
                self.parent_screen.blit(self.block, (self.x, self.y))
            pygame.display.flip()

        # defining the 4 possible directions
        def move_up(self):
            self.direction = 'up'
        def move_down(self):
            self.direction = 'down'
        def move_left(self):
            self.direction = 'left'
        def move_right(self):
            self.direction = 'right'

        # making the snake always move without user imput (start in the down direction)
        def walk(self):
            for i in range(self.length-1, 0 , -1):
                self.x[i] = self.x[i - 1]
                self.y[i] = self.y[i - 1]

            if self.direction == 'up':
                self.y[0] -= size
            if self.direction == 'down':
                self.y[0] += size
            if self.direction == 'left':
                self.x[0] -= size
            if self.direction == 'right':
                self.x[0] += size

            self.draw()

        # put the movement of the snake on the the screen and keep refreshing in order to delete old sections of the snake
        # (as in the old frames overlaid)
        def draw(self):
            self.parent_screen.fill((background_colour))
            for i in range (self.length):
                self.parent_screen.blit(self.block, (self.x[i], self.y[i]))
            pygame.display.flip()

    # Game and screen parameters
    class Game:
        def __init__(self):
            pygame.init()
            width = 1000
            height = 600
            # initialize the screen with the height and width set to variables
            self.surface = pygame.display.set_mode((width, height))
            self.surface.fill((background_colour))
            self.snake = Snake(self.surface, 1)
            self.snake.draw()
            self.apple = Apple(self.surface)
            self.apple.draw()


        def is_collision(self, x1, y1, x2, y2):
            if x1 >= x2 and x1 < x2 + size:
                if y1 >= y2 and y1 < y2 + size:
                    return True

            return False

        def display_score(self):
            font = pygame.font.SysFont('arial', 30)
            score = font.render(f"Score: {self.snake.length}", True, (255, 255, 255))
            self.surface.blit(score, (800, 10))

        def play(self):
            self.snake.walk()
            self.apple.draw()
            self.display_score()
            pygame.display.flip()

            # snake collididing with apples
            # snake length increases by 1 for every apple collided
            for i in range(self.snake.length):
                if self.is_collision(self.snake.x[0], self.snake.y[0], self.apple.x, self.apple.y):
                    self.snake.increase_length()
                    self.apple.move()

            # snake colliding with its tail
            # snake hits its tail start the "game over" sequence
            for i in range(3, self.snake.length):
                if self.is_collision(self.snake.x[0], self.snake.y[0], self.snake.x[i], self.snake.y[i]):
                    raise "Game Over"

            # snake collides with borders
            # if the snake leaves the given borders start the "game over" sequence
            if not (0 <= self.snake.x[0] <= 1000 and 0 <= self.snake.y[0] <= 600):
                raise "Game Over"

        # game over sequence
        # variables are the text displayed over the background
        # line1 shows final score before game over
        # line2 propts user with options to quit or continue
        def show_game_over(self):
            self.surface.fill(background_colour)
            font = pygame.font.SysFont('arial', 30)
            line1 = font.render(f"Game Over! Your Score is {self.snake.length}", True, (white_text))
            self.surface.blit(line1, (200, 300))
            line2 = font.render("To play again press Enter. To exit press Escape.", True, (white_text))
            self.surface.blit(line2, (200, 350))
            pygame.display.flip()

        # reset sequence, just reuses the same initial code to overwrite the snake anc the apple
        # snake resets the length 1 and apple the original start position
        def reset(self):
            self.snake = Snake(self.surface, 1)
            self.apple = Apple(self.surface)

        def run(self):
            running = True
            pause = False
            while running:
                # key controls
                for event in pygame.event.get():
                    if event.type == KEYDOWN:
                        if event.key == K_ESCAPE:
                            running = False

                        if event.key == K_RETURN:
                            pause = False

                        if not pause:

                            if event.key == K_UP:
                                self.snake.move_up()

                            if event.key == K_DOWN:
                                self.snake.move_down()

                            if event.key == K_LEFT:
                                self.snake.move_left()

                            if event.key == K_RIGHT:
                                self.snake.move_right()

                    elif event.type == QUIT:
                        running = False

                try:
                    if not pause:
                        self.play()
                except Exception as e:
                    self.show_game_over()
                    pause = True
                    self.reset()

                # game speed
                time.sleep(0.2)

    game = Game()
    game.run()

    running = True
